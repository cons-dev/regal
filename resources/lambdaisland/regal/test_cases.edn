;; Title: Regal Test Cases
;; Author: Arne Brasseur
;;
;; Based on the comparison tables at http://www.regular-expressions.info, with
;; additional research and resources used where necessary.
;;
;; Test cases consist of a a regal form, the corresponding regex pattern, an
;; optional map with extra properties (currently equivalent regex forms) and a
;; sequence of input/match pairs.
;;
;; When the corresponding patterns depends on the regex flavor a map is used
;; instead to provide multiple patterns.
;;
;; Flavors:
;; - :java    Any Java
;; - :ecma    Any ECMAScript / JavaScript
;; - :java8   Java 1.8 (earlier not supported)
;; - :java9   Java 9 or later
;; - :common  Supported in all flavors
;;
[;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; Characters
 ;; http://www.regular-expressions.info/refcharacters.html

 :character-literals
 ;; Regal
 ;; | Pattern
 ;; |  |  Input
 ;; |  |    |  Match
 ;; |  |    |   |
 ["a" "a" ["a" "a"]]

 :literal-curly-brace
 ["{" "\\{" ["{" "{"]]

 :backslack-escaped-metacharacter
 ["$" "\\$" ["$" "$"]]
 ["(" "\\(" ["(" "("]]
 [")" "\\)" [")" ")"]]
 ["*" "\\*" ["*" "*"]]
 ["*" "\\*" ["*" "*"]]
 ["+" "\\+" ["+" "+"]]
 ["." "\\." ["." "."]]
 ["?" "\\?" ["?" "?"]]
 ["[" "\\[" ["[" "["]]
 ["]" "\\]" ["]" "]"]]
 ["\\" "\\\\" ["\\" "\\"]]
 ["^" "\\^" ["^" "^"]]
 ["{" "\\{" ["{" "{"]]
 ["|" "\\|" ["|" "|"]]
 ["}" "\\}" ["}" "}"]]

 :escape-sequence
 ["a+-*/" "a\\+-\\*/"
  {:equivalent {:java ["\\Qa+-*/\\E"]}}
  ["cba+-*/" "a+-*/"]]

 :hexadecimal-escape
 ["u" "u"
  {:equivalent ["\\x75"]}
  ["u" "u"]]
 ["\t" "\t"
  {:equivalent ["\\x09"]}
  ["\t" "\t"]]

 :lf-cr-tab
 [:newline "\\n" ["\n" "\n"]]
 [:return "\\r" ["\r" "\r"]]
 [:tab "\\t" ["\t" "\t"]]

 :line-break
 [:line-break
  {:java8 "\\R"
   :java9 "(?:\\r\\n|(?!\\r\\n)[\\n-\\r\\x85\\u2028\\u2029])"
   :ecma  "(?:\\r\\n|(?!\\r\\n)[\\n-\\r\\x85\\u2028\\u2029])"
   :re2 "(?:\\r\\n|[\\n-\\r\\x85\\x{2028}\\x{2029}])"}
  ["\r" "\r"]
  ["\n" "\n"]
  ["\f" "\f"]
  ["\r\n" "\r\n"]
  ["\u000B" "\u000B"] ;; <LINE TABULATION> a.k.a. Vertical Tab (VT)
  ["\u0085" "\u0085"] ;; <NEXT LINE> (NEL)
  ["\u2028" "\u2028"] ;; <LINE SEPARATOR>
  ["\u2029" "\u2029"]] ;; <PARAGRAPH SEPARATOR>

 [[:cat :line-break :line-break]
  {:java8 "\\R\\R"
   :java9 "(?:\\r\\n|(?!\\r\\n)[\\n-\\r\\x85\\u2028\\u2029])(?:\\r\\n|(?!\\r\\n)[\\n-\\r\\x85\\u2028\\u2029])"
   :ecma  "(?:\\r\\n|(?!\\r\\n)[\\n-\\r\\x85\\u2028\\u2029])(?:\\r\\n|(?!\\r\\n)[\\n-\\r\\x85\\u2028\\u2029])"
   :re2 :skip}
  ["\r\r" "\r\r"]
  ["\n\n" "\n\n"]
  ["\f\f" "\f\f"]
  ["\u000B\u0085" "\u000B\u0085"]
  ["\r\n" nil]]    ;; no match, \r\n is "indivisible" w.r.t \R

 :character-escape
 [:alert {:java "\\a" :ecma "\\x07" :re2 "\\a"} ["\u0007" "\u0007"]]
 [:escape {:java "\\e" :ecma "\\x1B" :re2 "\\x1B"} ["\u001B" "\u001B"]]
 [:form-feed "\\f" ["\f" "\f"]]
 [:vertical-whitespace {:java "\\v"
                        :ecma "[\\n\\f\\r\\x0B\\x85\\u2028\\u2029]"
                        :re2  "[\\n\\f\\r\\x0B\\x85\\x{2028}\\x{2029}]"
                        }
  ["\n" "\n"]
  ["\r" "\r"]
  ["\f" "\f"]
  ["\u000B" "\u000B"]
  ["\u0085" "\u0085"]
  ["\u2028" "\u2028"]
  ["\u2029" "\u2029"]]

 [:vertical-tab {:java "\\x0B"
                 :ecma "\\v"
                 :re2 "\\v"}
  ["\n" nil]
  ["\r" nil]
  ["\f" nil]
  ["\u000B" "\u000B"]
  ["\u0085" nil]
  ["\u2028" nil]
  ["\u2029" nil]]

 :control
 [[:ctrl "A"] {:java "\\cA" :ecma "\\cA" :re2 "\\x01"} ["\u0001" "\u0001"]]
 [[:ctrl "J"] {:java "\\cJ" :ecma "\\cJ" :re2 "\\x0A"} ["\n" "\n"]]

 :null
 ^:no-parse
 [:null {:java "\\x00" :ecma "\\0" :re2 "\\x00"}
  ["\u0000" "\u0000"]
  ["\u0001" nil]]

 ;; Not doing octal notation (e.g. \010). Most of them are only supported in
 ;; JavaScript, and there are plenty of other options to refer to specific
 ;; codepoints. May revisit when we start parsing in earnest to support full
 ;; round tripping.

 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; Basic features
 ;; http://www.regular-expressions.info/refbasic.html

 :dot
 [:any {:java "." :ecma "." :re2 "[^\\n\\r]"} 
  ["x" "x"]]

 :alternation
 [[:alt "abc" "def" "xyz"] "abc|def|xyz"
  ["abc" "abc"]
  ["def" "def"]
  ["abcd" "abc"]
  ["bcd" nil]]
 [[:alt "a" "ab"] "a|ab" ["ab" "a"]]
 [[:alt "ab" "a"] "ab|a" ["ab" "ab"]]

 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; Character classes
 ;; http://www.regular-expressions.info/refcharclass.html
 :literal-character-class
 [[:class "abc"] "[abc]" ["a" "a"] ["b" "b"] ["c" "c"] ["ab" "a"]]

 :backslash-escaped-metacharacter
 [[:class "^]"] "[\\^\\]]" ["^" "^"] ["]" "]"]]

 :range
 [[:class ["a" "z"] ["A" "Z"] ["0" "9"]] "[a-zA-Z0-9]" ["a" "a"] ["Z" "Z"] ["5" "5"]]

 :negated-bcc
 [[:not ["a" "d"]] "[^a-d]" ["e" "e"] ["b" nil]]

 :bcc-opening-bracket
 [[:class "["] "[\\[]" ["[" "["]]

 :bcc-escaped
 ;; :intersection [base&&[intersect]] Java-only
 [[:class :newline :return :tab] "[\\n\\r\\t]"]

 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; Shorthand Character classes
 ;; http://www.regular-expressions.info/refshorthand.html
 [:word "\\w" ["a" "a"]]
 [[:class :word] "[\\w]" ["a" "a"] ["5" "5"] ["_" "_"] ["&" nil]]
 [:non-word "\\W" ["5" nil] ["a" nil] ["&" "&"]]
 [[:class :non-word] "[\\W]" ["5" nil] ["a" nil]]
 [:digit "\\d" ["5" "5"] ["a" nil] ["_" nil] ["&" nil]]
 [[:class :digit] "[\\d]" ["5" "5"] ["a" nil] ["_" nil] ["&" nil]]
 [:whitespace {:java "[\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]"
               :re2 "[\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\x{1680}\\x{2000}\\x{2001}\\x{2002}\\x{2003}\\x{2004}\\x{2005}\\x{2006}\\x{2007}\\x{2008}\\x{2009}\\x{200A}\\x{2028}\\x{2029}\\x{202F}\\x{205F}\\x{3000}]"
               :ecma "\\s"}
  ["\n" "\n"]
  ["\t" "\t"]
  ["\u205F" "\u205F"] ;; MEDIUM MATHEMATICAL SPACE
  ["\u00A0" "\u00A0"] ;; NON-BREAKING SPACE
  ]
 [:non-whitespace {:java "[^\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]"
                   :re2 "[^\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\x{1680}\\x{2000}\\x{2001}\\x{2002}\\x{2003}\\x{2004}\\x{2005}\\x{2006}\\x{2007}\\x{2008}\\x{2009}\\x{200A}\\x{2028}\\x{2029}\\x{202F}\\x{205F}\\x{3000}]"
                   :ecma "\\S"}
  ["x" "x"]
  ["\t" nil]
  ["\u00A0" nil] ;; NON-BREAKING SPACE
  ]

 ^:no-parse
 [[:class :non-whitespace] {:java  "[\\x00-\\x08\\x0E-\\x1F\\x21-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uFFFF]"
                            :re2 "[\\x00-\\x08\\x0E-\\x1F\\x21-\\x9F\\xA1-\\x{167F}\\x{1681}-\\x{1FFF}\\x{200B}-\\x{2027}\\x{202A}-\\x{202E}\\x{2030}-\\x{205E}\\x{2060}-\\x{2FFF}\\x{3001}-\\x{FFFF}]"
                            :ecma "[\\S]"}
  ["x" "x"]
  ["\t" nil]
  ["\u00A0" nil] ;; NON-BREAKING SPACE
  ]


 ;; Shorthands
 ;; Anchors
 ;; Word boundaries
 ;; Quantifiers
 ;; Capturing groups
 ;; Special groups (Lookahead)
 ;; Modifiers
 ;; lazy vs eager ? / ?? ; * / *?
 ;; character class union / intersection / subtraction
 ]
